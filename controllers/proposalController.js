const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Proposal = require('../models/Proposal');
const User = require('../models/User');
const CompanyProfile = require('../models/CompanyProfile');
const EmployeeProfile = require('../models/EmployeeProfile');
const multer = require('multer');
const { GridFsStorage } = require('multer-gridfs-storage');
const crypto = require('crypto');
const path = require('path');
const axios = require('axios');
require('dotenv').config();

// GridFS Storage - FIXED VERSION
const storage = new GridFsStorage({
  url: process.env.MONGO_URI,
  file: (req, file) => {
    return new Promise((resolve, reject) => {
      crypto.randomBytes(16, (err, buf) => {
        if (err) {
          console.error('Crypto error:', err);
          return reject(err);
        }

        try {
          const filename = buf.toString('hex') + path.extname(file.originalname);

          console.log('Preparing to upload file:', filename);

          // FIXED: Remove the custom _id, let GridFS generate it
          resolve({
            filename,
            bucketName: 'uploads',
            metadata: { originalname: file.originalname }
          });

          console.log('Created a file:', filename);
        } catch (error) {
          console.error('File resolve error:', error);
          reject(error);
        }
      });
    });
  }
});

const upload = multer({ storage });
const singleImageUpload = upload.single('image');

// Utility to generate file URLs (optional usage)
const generateFileURLs = (files = []) => files.map((file) => `${process.env.FRONTEND_URL || 'http://localhost:3000'}/file/${file.fileId}`);

// CREATE proposal route - FIXED VERSION
exports.create = [(req, res, next) => {
  upload.array('projects')(req, res, function (err) {
    if (err) {
      console.error('Multer Error:', err);
      return res.status(500).json({ error: 'File upload failed', details: err.message });
    }
    next();
  });
}, async (req, res) => {
  try {
    console.log("Entered /createProposal route");
    const files = req.files;

    // if (!files || files.length === 0) {
    //   return res.status(400).json({ error: 'At least one project file is required' });
    // }

    // FIXED: Use the file.id generated by GridFS instead of file._id
    const uploadedDocuments = files.map(file => ({
      fileId: file.id, // This is the correct property from GridFS
      filename: file.filename
    }));

    console.log('Project files:', uploadedDocuments); // Debug log

    const newProposal = new Proposal({
      ...req.body,
      uploadedDocuments,
    });

    const fileUrls = generateFileURLs(uploadedDocuments);

    const savedProposal = await newProposal.save();
    console.log('Proposal saved:', savedProposal);
    res.json({ ...savedProposal.toObject(), projectFileUrls: fileUrls });
  } catch (err) {
    console.error('Error in /createProposal:', err);
    res.status(500).json({ error: err.message });
  }
}];

// READ ALL
exports.readAll = async (req, res) => {
  try {
    const { name, email } = req.body;
    if (!name || !email) return res.status(400).json({ error: 'Name and email are required' });

    const all = await Proposal.find({ name, email }).sort({ createdAt: -1 });
    const withUrls = all.map(p => ({
      ...p.toObject(),
      projectFileUrls: generateFileURLs(p.uploadedDocuments)
    }));
    res.json(withUrls);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// READ ONE
exports.read = async (req, res) => {
  try {
    const proposal = await Proposal.findById(req.params.id);
    if (!proposal) return res.status(404).send('Not found');

    const fileUrls = generateFileURLs(proposal.uploadedDocuments);
    res.json({ ...proposal.toObject(), projectFileUrls: fileUrls });
  } catch {
    res.status(500).send('Server error');
  }
};

// SERVE FILE
exports.serve = async (req, res) => {
  try {
    const bucket = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
      bucketName: 'uploads',
    });

    const fileId = new mongoose.Types.ObjectId(req.params.id);
    const downloadStream = bucket.openDownloadStream(fileId);

    downloadStream.on('error', () => res.status(404).send('File not found'));
    downloadStream.pipe(res);
  } catch {
    res.status(400).send('Invalid file ID');
  }
};

// UPDATE - FIXED VERSION
exports.update = [upload.array('projects'), async (req, res) => {
  try {
    const proposal = await Proposal.findById(req.params.id);
    if (!proposal) return res.status(404).send('Proposal not found');

    const bucket = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
      bucketName: 'uploads',
    });

    // Step 1: Parse retained files from the form data
    const retainedFiles = req.body.existingFiles
      ? Array.isArray(req.body.existingFiles)
        ? req.body.existingFiles.map(f => JSON.parse(f))
        : [JSON.parse(req.body.existingFiles)]
      : [];

    // Step 2: Delete only files NOT in retained list
    const retainedFileIds = new Set(retainedFiles.map(f => f.fileId));
    for (const file of proposal.uploadedDocuments) {
      if (!retainedFileIds.has(file.fileId.toString())) {
        try {
          await bucket.delete(new mongoose.Types.ObjectId(file.fileId));
        } catch (err) {
          console.error('Failed to delete old file:', err.message);
        }
      }
    }

    // Step 3: Add New files
    const newFiles = req.files?.map(file => ({
      fileId: file.id,
      filename: file.filename
    })) || [];

    // Combine retained + newly uploaded
    const updatedDocuments = [...retainedFiles, ...newFiles];

    const updated = await Proposal.findByIdAndUpdate(
      req.params.id,
      { ...req.body, uploadedDocuments: updatedDocuments },
      { new: true }
    );

    const fileUrls = generateFileURLs(updatedDocuments);

    res.json({
      ...updated.toObject(),
      projectFileUrls: fileUrls
    });
  } catch (err) {
    console.error('Update failed:', err.message);
    res.status(500).send('Update failed');
  }
}];

// DELETE
exports.delete_1 = async (req, res) => {
  try {
    const proposal = await Proposal.findById(req.params.id);
    if (!proposal) return res.status(404).send('Proposal not found');

    const bucket = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
      bucketName: 'uploads',
    });

    for (const file of proposal.uploadedDocuments) {
      try {
        await bucket.delete(new mongoose.Types.ObjectId(file.fileId));
      } catch (err) {
        console.error('Failed to delete file from GridFS:', err.message);
      }
    }

    await proposal.deleteOne();
    res.sendStatus(204);
  } catch {
    res.status(500).send('Delete failed');
  }
};

// SEND PROPOSAL PDF
exports.sendProposalPDF = async (req, res) => {
  try {
    const proposal = await Proposal.findById(req.params.id);
    if (!proposal) return res.status(404).send('Proposal not found');

    // Assuming you have a function to generate PDF from proposal data
    const pdfBuffer = await generatePDF(proposal.generatedProposal); // Implement this function

    res.set({
      'Content-Type': 'application/pdf',
      'Content-Disposition': `attachment; filename="proposal-${proposal._id}.pdf"`,
      'Content-Length': pdfBuffer.length
    });

    res.send(pdfBuffer);
  } catch (err) {
    console.error('Error generating PDF:', err.message);
    res.status(500).send('Failed to generate PDF');
  }
};

exports.uploadImage = [
  singleImageUpload,
  async (req, res) => {
    try {
      const { rfpId } = req.body;
      if (!req.file) {
        return res.status(400).json({ message: "No file uploaded" });
      }
      // Construct the file URL (assuming a /file/:id route exists for serving GridFS files)
      const logoUrl = `${req.file.id}`;
      // Update the company profile with the new logo URL
      const proposal = await Proposal.find({ rfpId: rfpId });
      proposal.images.push(logoUrl);
      await proposal.save();
      res.status(200).json({ logoUrl });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
];

exports.getImage = async (req, res) => {
  try {
    const imageId = req.params.imageId;

    if (!imageId) {
      return res.status(400).json({ message: "Image ID is required" });
    }

    const bucket = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
      bucketName: 'uploads',
    });
    const fileId = new mongoose.Types.ObjectId(imageId);
    const downloadStream = bucket.openDownloadStream(fileId);
    downloadStream.on('error', () => res.status(404).send('File not found'));
    downloadStream.pipe(res);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.basicComplianceCheck = async (req, res) => {
  try {
    // let userEmail = req.user.email;
    // if (req.user.role === "employee") {
    //   const employeeProfile = await EmployeeProfile.findOne({ userId: req.user._id });
    //   userEmail = employeeProfile.companyMail;
    // }

    const userEmail = "draconx@draconx.com";

    const proposal = await Proposal.find({ companyMail: userEmail }).sort({ createdAt: -1 }).limit(1);

    console.log("Proposal: ", proposal);

    const initialProposal_1 = proposal.initialProposal;
    console.log("Initial proposal: ", initialProposal_1);

    const proposal_in_array = [initialProposal_1];
    console.log("Proposal in array: ", proposal_in_array);

    const resProposal = await axios.post('http://56.228.64.88:5000/basic-compliance', { proposal_in_array });

    console.log("Response: ", resProposal);

    const data = resProposal.data.report;

    const firstKey = Object.keys(data)[0];
    const firstValue = data[firstKey];

    const compliance_data = firstValue["compliance_flags"];

    console.log("Compliance data: ", compliance_data);

    res.status(200).json(compliance_data);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};